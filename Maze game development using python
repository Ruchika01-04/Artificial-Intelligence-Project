#install pip manager and python extension in vs code

import pygame
import math
from queue import PriorityQueue
import random
WIDTH = 800
WIN = pygame.display.set_mode((WIDTH, WIDTH))
pygame.display.set_caption("A* Path Finding Algorithm")

RED = (255, 0, 0) #(state visited)
GREEN = (0, 255, 0)
BLUE = (0, 255, 0)
YELLOW = (255, 255, 0)
WHITE = (255, 255, 255) #(state not yet visited)
BLACK = (0, 0, 0) #(barrier that have to avoid)
PURPLE = (128, 0, 128) #(path)
ORANGE = (255, 165 ,0) #(start node)
GREY = (128, 128, 128)
TURQUOISE = (64, 224, 208)

# to keep track of this nodes and create grid nodes/spots
#methods that tells the state of the spot
class Spot:
    def __init__(self, row, col, width, total_rows):
        self.row = row 
        self.col = col
        self.x = row * width
        self.y = col * width
        self.color = BLACK 
        self.neighbours=[]
        self.width = width
        self.total_rows = total_rows

    #indexig for rows and columns of grid
    def get_pos(self):
        return self.row, self.col
    
    def is_closed(self):
        return self.color == RED

    def is_open(self):
        return self.color == GREEN
    
    def is_barrier(self):
        return self.color == BLACK
    
    def is_start(self):
        return self.color == ORANGE
    
    def is_end(self):
        return self.color == PURPLE
    
    def reset(self):
        self.color = WHITE

    def make_start(self):
        self.color=ORANGE

    def make_closed(self):
        self.color = RED

    def make_open(self):
        self.color = GREEN

    def make_barrier(self):
        self.color = BLACK

    def make_end(self):
        self.color = TURQUOISE

    def make_path(self):
        self.color = PURPLE

    def draw(self, win): #where we want to draw the grid(window=win)
        pygame.draw.rect(win, self.color,(self.x,self.y, self.width, self.width))

    def update_neighbours(self,grid):
        self.neighbours=[]
        #checks for any barriers
        if self.row<self.total_rows-1 and not grid[self.row+1][self.col].is_barrier():#down
            self.neighbours.append(grid[self.row +1][self.col])

        if self.row>0 and not grid[self.row-1][self.col].is_barrier():#up
            self.neighbours.append(grid[self.row -1][self.col])

        if self.col<self.total_rows-1 and not grid[self.row][self.col+1].is_barrier():#left
            self.neighbours.append(grid[self.row ][self.col +1])

        if self.col>0 and not grid[self.row][self.col-1].is_barrier():#right
            self.neighbours.append(grid[self.row ][self.col-1])

    def __lt__(self,other):
        return False
    
#define the heuristic function
#finding the distance between point1 and point 2
#using manhattan distance
def h(p1,p2):
    x1,y1=p1
    x2,y2=p2
    return abs(x1-x2)+ abs(y1-y2)

def reconstruct_path(came_from,current,draw):
    while current in came_from:
        current=came_from[current]
        current.make_path()
        draw()

def algorithm(draw,grid,start,end):
    count=0#used if we hv 2 vqalues with the same fscore so to consider which we insert in the queue first
    open_set=PriorityQueue()
    #include the start node with the fscore(f(x)=g(x)+h(x))
    open_set.put((0,count,start))
    came_from ={} #keeps track which node came from where
    g_score = { spot: float("inf") for row in grid for spot in row} #keeps track of from start node to this node
    g_score[start] = 0 # to estimate how for the end node is from start node
    f_score = {Spot: float("inf") for row in grid for spot in row}# keeps track of predicted distance from this node to the end node
    f_score[start] = h(start.get_pos(),end.get_pos()) #heuristic distance

    open_set_hash = {start}#keep the track of all the items in and out of  the priority_queue 

    while not open_set.empty():
    #if openset is empty then its considered all possibble path it is going to and if not then path does'nt exist
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
        
        current =open_set.get()[2] #current node we are looking at
        open_set_hash.remove(current)

        if current == end: #where the shortest path is found
            reconstruct_path(came_from,end,draw)
            end.make_end()
            start.make_start()
            return True
        
        for neighbor in current.neighbours:
            temp_g_score = g_score[current] + 1 #to know the temporary g score of this neighbor we take current node and add 1 

            if temp_g_score < g_score[neighbor]: #update the value say this is the better path
                came_from[neighbor]= current 
                g_score[neighbor]= temp_g_score
                f_score[neighbor]= temp_g_score + h(neighbor.get_pos(),end.get_pos())
                if neighbor not in open_set_hash:
                    count += 1
                    open_set.put((f_score[neighbor],count, neighbor))
                    open_set_hash.add(neighbor)
                    neighbor.make_open()
        
        draw()

        if current != start:
            current.make_closed()
    return False #we do not find the path

#make grid
def make_grid(rows,width):
    grid=[]
    gap=width//rows
    for i in range(rows):
        grid.append([])#prepares a ew row in the grid
        for j in range(rows):
            spot=Spot(i,j,gap,rows)
            grid[i].append(spot)#appends newlycreated spot to the current row
    return grid

def draw_grid(win,rows,width):
    gap=width//rows
    for i in range (rows):
        pygame.draw.line(win,GREY,(0,i*gap),(width,i*gap))
        for j in range (rows):
            pygame.draw.line(win,GREY,(j*gap,0),(j*gap,width))

#generating the maze
def generate_maze(grid, visited, x, y):
    visited.add((x, y))  # Mark the cell as visited
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    random.shuffle(directions)
    for dx, dy in directions:
        nx, ny = x + dx * 2, y + dy * 2
        if (nx, ny) not in visited:
            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):
                visited.add((nx, ny))  # Mark the new cell as visited
                #to make it a passage
                pass1=grid[nx][ny] 
                pass1.reset()
                
                pass2= grid[x + dx][y + dy]
                pass2.reset()

                generate_maze(grid, visited, nx, ny)  # Recursive call

def create_maze(rows,grid):
    visited = set()  # Keep track of visited cells
    start_x, start_y = random.randint(0, rows - 1), random.randint(0, rows - 1)
    generate_maze(grid, visited, start_x, start_y)  # Generate maze recursively

def draw(win,grid,rows,width):
    #fill entire screen with one color
    #win.fill(WHITE)
    for row in grid:
        for spot in row:
            spot.draw(win)

    #draw_grid(win,rows,width)

    pygame.display.update()

def get_clicked_pos(pos,rows,width): #click 
    gap = width // rows
    y,x = pos

    row = y // gap
    col = x // gap

    return row, col 

def main(win, width):
    ROWS = 50
    grid = make_grid(ROWS,width)
    create_maze(ROWS,grid)
    start = None
    end = None

    run = True
    started = False
    while run:
        draw(win,grid,ROWS,width)
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT: #if user presses exit 
                run = False

            if started: #no interference of user     
                continue

            if pygame.mouse.get_pressed()[0]: #leftmost button
                pos= pygame.mouse.get_pos()
                row,col=get_clicked_pos(pos,ROWS,width)
                spot=grid[row][col]
                if not start and spot!=end and not spot.is_barrier():
                    start=spot
                    start.make_start()
                elif not end and spot!=start and not spot.is_barrier():
                    end=spot
                    end.make_end()

                # elif spot!=end and spot !=start:
                #     spot.make_barrier()

            elif pygame.mouse.get_pressed()[2]: # right button to erase any barriers of if we want to change the start or end positions
                pos= pygame.mouse.get_pos()
                row,col=get_clicked_pos(pos,ROWS,width)
                spot=grid[row][col]
                spot.reset()
                if spot==start:
                    start=None
                elif spot==end:
                    end=None

            if event.type==pygame.KEYDOWN:#checks if key is pressed
                if event.key== pygame.K_SPACE and not started:#checks if key pressed is space and started is false
                    for row in grid:
                        for spot in row:
                            spot.update_neighbours(grid)

                    #using anonymous function lambda to call draw as a parameter
                    algorithm(lambda:draw(win,grid,ROWS,width),grid,start,end)
    pygame.quit()

main(WIN,WIDTH)
